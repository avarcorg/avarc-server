name: CI

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

# Add permissions configuration
permissions:
  contents: read
  actions: read
  packages: read
  id-token: write  # Required for OAuth authentication

env:
  GHCR_ORG: avarcorg
  JAVA_VERSION: '24'
  NODE_VERSION: '22.14.0'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

      - name: Set up Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.8.11

      - name: Display Pack CLI
        run: pack --version

      - name: Set up Pack Tools
        uses: buildpacks/github-actions/setup-tools@v5.8.11

      - name: Display Pack Tools
        run: yj -v

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
          cache-dependency-path: '**/pom.xml'

      - name: Ensure mvnw is executable
        run: chmod +x ./mvnw

      - name: Display java tools
        run: ./mvnw --version

      - name: Extract Maven project version
        id: version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build with Maven
        run: ./mvnw --no-transfer-progress -DskipTests -Pwith-docker clean package

      # TODO: In the future, consider publishing to GitHub Packages for distribution:
      # - Configure Maven settings.xml with GitHub authentication
      # - Use deploy:deploy-file to publish JAR and POM
      # - This would make the artifacts available for other projects

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-build
          path: |
            avarc-backend/target/*.jar
            avarc-backend/target/classes
            avarc-backend/target/generated-sources
            avarc-backend/target/maven-status

      - name: Run Tests
        run: ./mvnw test -pl avarc-backend

      - name: Run Modulith Tests
        continue-on-error: true
        run: ./mvnw test -pl avarc-backend -Pwith-modulith

  build-and-push-container-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: maven-build
          path: avarc-backend/target

      - name: Set up Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.8.11

      - name: Display Pack CLI
        run: pack --version

      - name: Set up Pack Tools
        uses: buildpacks/github-actions/setup-tools@v5.8.11

      - name: Display Pack Tools
        run: yj -v

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
          cache-dependency-path: '**/pom.xml'

      - name: Ensure mvnw is executable
        run: chmod +x ./mvnw

      - name: Display java tools
        run: ./mvnw --version

      - name: Extract Maven project version
        id: version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Docker images
        run: ./mvnw --no-transfer-progress -DskipTests -Pwith-docker clean package

      - name: Show Docker image(s)
        run: |
          docker images | sort

      - name: Retag Docker images
        run: |
          docker tag avarc-backend:${{ env.VERSION }} ghcr.io/${{ env.GHCR_ORG }}/avarc-backend:${{ env.VERSION }}
          docker tag avarc-frontend:${{ env.VERSION }} ghcr.io/${{ env.GHCR_ORG }}/avarc-frontend:${{ env.VERSION }}
          # docker tag avarc-nginx:${{ env.VERSION }} ghcr.io/${{ env.GHCR_ORG }}/avarc-nginx:${{ env.VERSION }}

      - name: Verify application files in backend Docker image
        run: |
          # Create a temporary container from the image
          CONTAINER_ID=$(docker create ghcr.io/${{ env.GHCR_ORG }}/avarc-backend:${{ env.VERSION }})

          # Extract the container filesystem
          docker export $CONTAINER_ID > container.tar

          # Search for avarc files
          echo "Searching for avarc files in the container..."
          tar tf container.tar | grep avarc

          # Fail if no avarc files found
          if ! tar tf container.tar | grep -q avarc; then
            echo "No avarc files found in the container!"
            exit 1
          fi

          # Clean up
          docker rm $CONTAINER_ID
          rm container.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Show Docker image label(s)
        run: |
          docker inspect --format="{{json .Config.Labels}}" ghcr.io/${{ env.GHCR_ORG  }}/avarc-backend:${{ env.VERSION }} | jq "."
          echo
          docker inspect --format="{{json .Config.Labels}}" ghcr.io/${{ env.GHCR_ORG  }}/avarc-frontend:${{ env.VERSION }} | jq "."
          # echo
          # docker inspect --format="{{json .Config.Labels}}" ghcr.io/${{ env.GHCR_ORG  }}/avarc-nginx:${{ env.VERSION }} | jq "."

      - name: Push Docker images
        run: |
          docker push ghcr.io/${{ env.GHCR_ORG  }}/avarc-backend:${{ env.VERSION }}
          docker push ghcr.io/${{ env.GHCR_ORG  }}/avarc-frontend:${{ env.VERSION }}
          # docker push ghcr.io/${{ env.GHCR_ORG  }}/avarc-nginx:${{ env.VERSION }}

  trigger-deployment:
    needs: build-and-push-container-images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

      - name: Connect to Tailscale
        id: tailscale
        # Required OAuth client permissions:
        # - auth_keys
        # - device_invites:read
        # - devices:core
        # - devices:posture_attributes:read
        # - devices:routes
        # - dns:read
        uses: tailscale/github-action@v2
        continue-on-error: true
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: 'tag:deploy-avarc'
          hostname: github-runner-${{ github.run_id }}

      - name: Show tailscaled.log
        run: |
          echo "=== tailscaled.log contents ==="
          cat ~/tailscaled.log || echo "No tailscaled.log found"
          echo "=== End of tailscaled.log ==="

      - name: Trigger deployment
        if: success()
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_TRIGGER_URL }} \
            -H "Content-Type: application/json" \
            --data "{\"version\": \"${{ env.VERSION }}\"}"
