# This file is required by the Paketo buildpack but is not used.
# The actual configuration is generated from nginx.conf.template at runtime.

worker_processes 1;
daemon off;
error_log stderr;

events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    charset utf-8;
    log_format json_combined escape=json '{ "time": "$time_iso8601", '
                                         '"remote_addr": "$remote_addr", '
                                         '"remote_user": "$remote_user", '
                                         '"request": "$request", '
                                         '"status": "$status", '
                                         '"body_bytes_sent": "$body_bytes_sent", '
                                         '"request_time": "$request_time", '
                                         '"http_referrer": "$http_referer", '
                                         '"scheme": "$scheme", '
                                         '"http_x_forwarded_proto": "$http_x_forwarded_proto", '
                                         '"http_user_agent": "$http_user_agent" }';
    access_log /dev/stdout json_combined if=$loggable;

    # Use forwarded protocol for scheme
    map $http_x_forwarded_proto $real_scheme {
        default $scheme;
        https https;
    }

    upstream backend {
        server {{env "APP_BACKEND_HOST"}}:{{env "APP_BACKEND_PORT"}};
    }

    upstream frontend {
        server {{env "APP_FRONTEND_HOST"}}:{{env "APP_FRONTEND_PORT"}};
    }

    upstream adminer {
        server {{env "APP_ADMINER_HOST"}}:{{env "APP_ADMINER_PORT"}};
    }

    # Map to exclude certain paths from logging
    map $request_uri $loggable {
        default 1;
        "~^/_next/webpack-hmr" 0;
        "~^/favicon.ico" 0;
    }

    server {
        listen {{env "NGINX_PORT"}};

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Default proxy headers for all locations
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $real_scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Handle HTTPS properly
        absolute_redirect off;
        port_in_redirect off;

        # TODO: These endpoints should be secured with authentication in production
        # Consider implementing:
        # 1. Basic authentication
        # 2. IP-based restrictions
        # 3. OAuth2/OpenID Connect

        # Example 1: Internal health check endpoint
        # location /actuator/health {
        #     internal;
        #     proxy_pass http://backend;
        # }

        location /actuator {
            proxy_pass http://backend;
        }

        location /v3/api-docs {
            proxy_pass http://backend;
        }

        location /swagger-ui.html {
            proxy_pass http://backend;
        }

        location /swagger-ui/ {
            proxy_pass http://backend;
        }

        # Adminer access
        location /adminer/ {
            proxy_pass http://adminer;
        }

        # All other requests go to frontend
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            index index.html;
        }
    }
}
